# exttests/test_sync_repo2
# 
# Part of the CCNx distribution.
#
# Copyright (C) 2011 Palo Alto Research Center, Inc.
#
# This work is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
# This work is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#

AFTER : test_twohop_ccnd_teardown test_sync_read

# TOPO to assume (must be routable for ccnd)
TOPO=/Topo
# slice hash for $TOPO /root/beer
RH=/%C9R%A1%9EK%0D8%22%C8R%83%C8J%E5%15%07%B5%03%226%F3%CE%9Fz%19~T%9B%18%AAc%F3

NAMES=256
BS=4096
TARGET="treeNames $NAMES"

# proc to create an empty repo bound to ccnd N

StartEmptyRepo () {
  env | grep CCNR
  N=$1
  CCNR_NAME="repo.$N"
  export CCNR_DIRECTORY=${CCNR_TEST_REPOS:-.}/$CCNR_NAME.dir
  rm -Rf $CCNR_DIRECTORY
  mkdir $CCNR_DIRECTORY
  echo in StartRepo $N, $CCNR_DIRECTORY
  ccnr 2>ccnr.$N.err >ccnr.$N.log
}

# proc to wait for a non-empty sync tree in repo N

WaitRepoLeaves () {
  N=$1
  while true; do
    { WithCCND $N SyncTest -scope 1 -stats $TOPO $RH >stats$N.txt ; } || Fail "Can't get stats"
    { grep -w "$TARGET" stats$N.txt >/dev/null ; } && break
    printf "."
    sleep 1 || SkipTest
  done
  printf "\n"
}

# setup appropriate CCNR and SYNC env variables

export CCNR_DEBUG=INFO
export CCNS_ENABLE=1
export CCNS_DEBUG=INFO
export CCNS_REPO_STORE=1
export CCNS_STABLE_ENABLED=0
export CCNS_FAUX_ERROR=0

# start 2 ccnd instances

rm -f ccnd1.out ccnd2.out
WithCCND 1 ccnd 2>ccnd1.out &
WithCCND 2 ccnd 2>ccnd2.out &

until CheckForCCND 1 && CheckForCCND 2; do
  echo Waiting ... >&2
  sleep 1
done

# point ccnd 1 and ccnd 2 at each other

Linkup 1 2
Linkup 2 1

rm -f test.data check.data
dd bs=$BS count=$NAMES if=/dev/zero of=test.data 2>/dev/null

echo -- Start and init repo 1

WithCCND 1 StartEmptyRepo 1 &
WithCCND 1 SyncTest -scope 1 -slice $TOPO /root/beer 
WithCCND 1 SyncTest -scope 1 -bs $BS -put test.data ccnx:/root/beer/float
WithCCND 1 ccnrm ccnx:/root/beer
WaitRepoLeaves 1

echo -- Start and init repo 2
WithCCND 2 StartEmptyRepo 2 &
WithCCND 2 SyncTest -scope 1 -bs $BS -slice $TOPO /root/beer 
echo -- Wait for sync and fetch data

WaitRepoLeaves 2

echo -- Kill repo 1, flush ccnd 2, then fetch data from repo 2
WithCCND 1 ccndsmoketest kill
WithCCND 2 ccnrm ccnx:/root/beer
WithCCND 2 SyncTest -scope 1 -bs $BS -get ccnx:/root/beer/float check.data
WithCCND 2 ccndsmoketest kill

echo -- Checking output

diff test.data check.data || Fail data not equal

rm -f test.data check.data
rm -Rf repo.*.dir

