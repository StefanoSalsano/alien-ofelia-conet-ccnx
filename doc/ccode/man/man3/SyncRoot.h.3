.TH "sync/SyncRoot.h" 3 "4 Feb 2013" "Version 0.7.1" "Content-Centric Networking in C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sync/SyncRoot.h \- 
.PP
Part of CCNx Sync.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBSyncRootStruct\fP"
.br
.RI "\fIA \fBSyncRootStruct\fP object holds the necessary data for a root sync tree. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSyncRootLookupCode\fP { \fBSyncRootLookupCode_none\fP, \fBSyncRootLookupCode_covered\fP, \fBSyncRootLookupCode_error\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBSyncRootStruct\fP * \fBSyncAddRoot\fP (struct \fBSyncBaseStruct\fP *base, int syncScope, const struct \fBccn_charbuf\fP *topoPrefix, const struct \fBccn_charbuf\fP *namingPrefix, struct \fBSyncNameAccum\fP *filter)"
.br
.RI "\fInamesToAdd has the names where content is known to be present. \fP"
.ti -1c
.RI "struct \fBSyncRootStruct\fP * \fBSyncRemRoot\fP (struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIRemoves the root from the base, and frees up associated storage. \fP"
.ti -1c
.RI "struct \fBSyncRootStruct\fP * \fBSyncRootDecodeAndAdd\fP (struct \fBSyncBaseStruct\fP *base, struct \fBccn_buf_decoder\fP *d)"
.br
.RI "\fIParse a content object representing a config slice, and if successful add it to the base. \fP"
.ti -1c
.RI "int \fBSyncRootAppendSlice\fP (struct \fBccn_charbuf\fP *cd, struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIAppends the ccnb encoding for a config slice to the provided cb. \fP"
.ti -1c
.RI "struct \fBSyncHashCacheEntry\fP * \fBSyncRootTopEntry\fP (struct \fBSyncRootStruct\fP *root)"
.br
.ti -1c
.RI "enum \fBSyncRootLookupCode\fP \fBSyncRootLookupName\fP (struct \fBSyncRootStruct\fP *root, const struct \fBccn_charbuf\fP *name)"
.br
.RI "\fITests to see if the name is covered by this root. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Part of CCNx Sync. 


.PP
Definition in file \fBSyncRoot.h\fP.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSyncRootLookupCode\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fISyncRootLookupCode_none \fP\fP
not covered by this root 
.TP
\fB\fISyncRootLookupCode_covered \fP\fP
covered by this root 
.TP
\fB\fISyncRootLookupCode_error \fP\fP
error in the name or the state 
.PP
Definition at line 107 of file SyncRoot.h.
.SH "Function Documentation"
.PP 
.SS "struct \fBSyncRootStruct\fP* SyncAddRoot (struct \fBSyncBaseStruct\fP * base, int syncScope, const struct \fBccn_charbuf\fP * topoPrefix, const struct \fBccn_charbuf\fP * namingPrefix, struct \fBSyncNameAccum\fP * filter)\fC [read]\fP"
.PP
namesToAdd has the names where content is known to be present. These names should come from SyncNotifyContent. The name storage belongs to the root.
.PP
namesToFetch has the names where content should be fetched. Once content is fetched and stored to the repo the names should be appended to namesToAdd. The name storage belongs to the root. Creates a new root structure and adds it to the base. The syncScope will be used for sync control interests (-1 for unscoped). The topoPrefix and namingPrefix will be copied and canonicalized. The filter (and the names in it) will also be copied and canonicalized. Canonicalized data is owned by the base. 
.PP
\fBReturns:\fP
.RS 4
the new root object 
.RE
.PP

.PP
Definition at line 105 of file SyncRoot.c.
.PP
Referenced by ccns_open(), genTestRootRepos(), genTestRootRouting(), SyncRootDecodeAndAdd(), and testReadBuilder().
.SS "struct \fBSyncRootStruct\fP* SyncRemRoot (struct \fBSyncRootStruct\fP * root)\fC [read]\fP"
.PP
Removes the root from the base, and frees up associated storage. Requires that there are no active comparisons. Deactivates all pending interests. 
.PP
\fBReturns:\fP
.RS 4
NULL if the root was removed, the root itself if not removed. 
.RE
.PP

.PP
Definition at line 172 of file SyncRoot.c.
.PP
Referenced by ccns_close(), findAndDeleteRoot(), main(), SyncFreeBase(), SyncHandleSlice(), testRootBasic(), and testRootCoding().
.SS "int SyncRootAppendSlice (struct \fBccn_charbuf\fP * cd, struct \fBSyncRootStruct\fP * root)"
.PP
Appends the ccnb encoding for a config slice to the provided cb. \fBReturns:\fP
.RS 4
-1 for failure, 0 for success. 
.RE
.PP

.PP
Definition at line 294 of file SyncRoot.c.
.PP
Referenced by SyncAddRoot(), and testRootCoding().
.SS "struct \fBSyncRootStruct\fP* SyncRootDecodeAndAdd (struct \fBSyncBaseStruct\fP * base, struct \fBccn_buf_decoder\fP * d)\fC [read]\fP"
.PP
Parse a content object representing a config slice, and if successful add it to the base. \fBReturns:\fP
.RS 4
the new root if successful, NULL otherwise. 
.RE
.PP

.PP
Definition at line 238 of file SyncRoot.c.
.PP
Referenced by SyncHandleSlice(), and testRootCoding().
.SS "enum \fBSyncRootLookupCode\fP SyncRootLookupName (struct \fBSyncRootStruct\fP * root, const struct \fBccn_charbuf\fP * name)"
.PP
Tests to see if the name is covered by this root. Useful for testing full names given by the Repo. The topoPrefix does not participate, but the filter does. 
.PP
\fBReturns:\fP
.RS 4
a code indicating the result 
.RE
.PP

.PP
Definition at line 330 of file SyncRoot.c.
.PP
Referenced by SyncAddName(), and testRootLookup().
.SS "struct \fBSyncHashCacheEntry\fP* SyncRootTopEntry (struct \fBSyncRootStruct\fP * root)\fC [read]\fP"\fBReturns:\fP
.RS 4
the top entry, if the root hash has been established for this root, otherwise returns NULL. 
.RE
.PP

.PP
Definition at line 318 of file SyncRoot.c.
.PP
Referenced by testReadBuilder(), and UpdateAction().
.SH "Author"
.PP 
Generated automatically by Doxygen for Content-Centric Networking in C from the source code.
