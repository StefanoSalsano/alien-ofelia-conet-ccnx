.TH "ccnr/ccnr_store.c" 3 "4 Feb 2013" "Version 0.7.1" "Content-Centric Networking in C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ccnr/ccnr_store.c \- 
.PP
Part of ccnr - CCNx Repository Daemon.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBcontent_entry\fP"
.br
.RI "\fIThe content hash table is keyed by the initial portion of the ContentObject that contains all the parts of the complete name. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBFAILIF\fP(cond)   do {} while ((cond) && r_store_fatal(h, __func__, __LINE__))"
.br
.ti -1c
.RI "#define \fBCHKSYS\fP(res)   FAILIF((res) == -1)"
.br
.ti -1c
.RI "#define \fBCHKRES\fP(res)   FAILIF((res) < 0)"
.br
.ti -1c
.RI "#define \fBCHKPTR\fP(p)   FAILIF((p) == NULL)"
.br
.ti -1c
.RI "#define \fBCCN_BT_CLEAN_BATCH\fP   3"
.br
.RI "\fINumber of btree index writes to do in a batch. \fP"
.ti -1c
.RI "#define \fBCCN_BT_CLEAN_TICK_MICROS\fP   65536"
.br
.RI "\fIApproximate delay between batches of btree index writes. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fBr_store_set_flatname\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, struct \fBccn_parsed_ContentObject\fP *pco)"
.br
.RI "\fIParses content object and sets content->flatname. \fP"
.ti -1c
.RI "static int \fBr_store_content_btree_insert\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, struct \fBccn_parsed_ContentObject\fP *pco, \fBccnr_accession\fP *accp)"
.br
.ti -1c
.RI "static int \fBr_store_fatal\fP (struct \fBccnr_handle\fP *h, const char *fn, int lineno)"
.br
.ti -1c
.RI "PUBLIC \fBccnr_accession\fP \fBr_store_content_accession\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC \fBccnr_cookie\fP \fBr_store_content_cookie\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC size_t \fBr_store_content_size\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "static off_t \fBr_store_offset_from_accession\fP (struct \fBccnr_handle\fP *h, \fBccnr_accession\fP a)"
.br
.ti -1c
.RI "static unsigned \fBr_store_repofile_from_accession\fP (struct \fBccnr_handle\fP *h, \fBccnr_accession\fP a)"
.br
.ti -1c
.RI "static const unsigned char * \fBr_store_content_mapped\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "static const unsigned char * \fBr_store_content_read\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_content_trim\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIIf the content appears to be safely stored in the repository, removes any buffered copy. \fP"
.ti -1c
.RI "PUBLIC void \fBr_store_trim\fP (struct \fBccnr_handle\fP *h, unsigned long limit)"
.br
.RI "\fIEvict recoverable content from in-memory buffers. \fP"
.ti -1c
.RI "PUBLIC const unsigned char * \fBr_store_content_base\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIGet the base address of the content object. \fP"
.ti -1c
.RI "PUBLIC int \fBr_store_name_append_components\fP (struct \fBccn_charbuf\fP *dst, struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, int skip, int count)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_content_flags\fP (struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_content_change_flags\fP (struct \fBcontent_entry\fP *content, int set, int clear)"
.br
.ti -1c
.RI "static int \fBr_store_write_stable_point\fP (struct \fBccnr_handle\fP *h)"
.br
.RI "\fIWrite a file named index/stable that contains the size of repoFile1 when the repository is shut down. \fP"
.ti -1c
.RI "static void \fBr_store_read_stable_point\fP (struct \fBccnr_handle\fP *h)"
.br
.RI "\fIRead the former size of repoFile1 from index/stable, and remove the latter. \fP"
.ti -1c
.RI "static int \fBr_store_reindexing\fP (struct ccn_schedule *sched, void *clienth, struct \fBccn_scheduled_event\fP *ev, int flags)"
.br
.RI "\fILog a bit if we are taking a while to re-index. \fP"
.ti -1c
.RI "static unsigned \fBchoose_limit\fP (unsigned l, unsigned m)"
.br
.RI "\fISelect power of 2 between l and m + 1 (if possible). \fP"
.ti -1c
.RI "static void \fBcleanup_content_entry\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "static void \fBfinalize_accession\fP (struct \fBhashtb_enumerator\fP *e)"
.br
.ti -1c
.RI "PUBLIC void \fBr_store_init\fP (struct \fBccnr_handle\fP *h)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_final\fP (struct \fBccnr_handle\fP *h, int stable)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_content_from_accession\fP (struct \fBccnr_handle\fP *h, \fBccnr_accession\fP accession)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_content_from_cookie\fP (struct \fBccnr_handle\fP *h, \fBccnr_cookie\fP cookie)"
.br
.ti -1c
.RI "PUBLIC \fBccnr_cookie\fP \fBr_store_enroll_content\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIThis makes a cookie for content, and, if it has an accession number already, enters it into the content_by_accession_tab. \fP"
.ti -1c
.RI "PUBLIC void \fBr_store_forget_content\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP **pentry)"
.br
.RI "\fIRemove internal representation of a content object. \fP"
.ti -1c
.RI "static struct \fBcontent_entry\fP * \fBr_store_look\fP (struct \fBccnr_handle\fP *h, const unsigned char *key, size_t size)"
.br
.RI "\fIGet a handle on the content object that matches key, or if there is no match, the one that would come just after it. \fP"
.ti -1c
.RI "static int \fBccn_append_interest_bounds\fP (const unsigned char *interest_msg, const struct \fBccn_parsed_interest\fP *pi, struct \fBccn_charbuf\fP *lower, struct \fBccn_charbuf\fP *upper)"
.br
.RI "\fIExtract the flatname representations of the bounds for the next component after the name prefix of the interest. \fP"
.ti -1c
.RI "static struct \fBcontent_entry\fP * \fBr_store_lookup_backwards\fP (struct \fBccnr_handle\fP *h, const unsigned char *interest_msg, const struct \fBccn_parsed_interest\fP *pi, struct \fBccn_indexbuf\fP *comps)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_find_first_match_candidate\fP (struct \fBccnr_handle\fP *h, const unsigned char *interest_msg, const struct \fBccn_parsed_interest\fP *pi)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_content_matches_interest_prefix\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, const unsigned char *interest_msg, size_t interest_size)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_content_next\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_next_child_at_level\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, int level)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_lookup\fP (struct \fBccnr_handle\fP *h, const unsigned char *msg, const struct \fBccn_parsed_interest\fP *pi, struct \fBccn_indexbuf\fP *comps)"
.br
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBr_store_lookup_ccnb\fP (struct \fBccnr_handle\fP *h, const unsigned char *namish, size_t size)"
.br
.RI "\fIFind the first content handle that matches the prefix given by the namish, which may be a Name, Interest, ContentObject, . \fP"
.ti -1c
.RI "PUBLIC void \fBr_store_mark_stale\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIMark content as stale. \fP"
.ti -1c
.RI "static int \fBexpire_content\fP (struct ccn_schedule *sched, void *clienth, struct \fBccn_scheduled_event\fP *ev, int flags)"
.br
.RI "\fIScheduled event that makes content stale when its FreshnessSeconds has expired. \fP"
.ti -1c
.RI "PUBLIC void \fBr_store_set_content_timer\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, struct \fBccn_parsed_ContentObject\fP *pco)"
.br
.RI "\fISchedules content expiration based on its FreshnessSeconds. \fP"
.ti -1c
.RI "PUBLIC struct \fBccn_charbuf\fP * \fBr_store_content_flatname\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIGet the flatname associated with content. \fP"
.ti -1c
.RI "PUBLIC struct \fBcontent_entry\fP * \fBprocess_incoming_content\fP (struct \fBccnr_handle\fP *h, struct \fBfdholder\fP *\fBfdholder\fP, unsigned char *msg, size_t size, off_t *offsetp)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_content_field_access\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, enum \fBccn_dtag\fP dtag, const unsigned char **bufp, size_t *sizep)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_set_accession_from_offset\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content, struct \fBfdholder\fP *\fBfdholder\fP, off_t offset)"
.br
.ti -1c
.RI "PUBLIC void \fBr_store_send_content\fP (struct \fBccnr_handle\fP *h, struct \fBfdholder\fP *\fBfdholder\fP, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC int \fBr_store_commit_content\fP (struct \fBccnr_handle\fP *h, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "PUBLIC void \fBccnr_debug_content\fP (struct \fBccnr_handle\fP *h, int lineno, const char *msg, struct \fBfdholder\fP *\fBfdholder\fP, struct \fBcontent_entry\fP *content)"
.br
.ti -1c
.RI "static int \fBr_store_index_cleaner\fP (struct ccn_schedule *sched, void *clienth, struct \fBccn_scheduled_event\fP *ev, int flags)"
.br
.ti -1c
.RI "PUBLIC void \fBr_store_index_needs_cleaning\fP (struct \fBccnr_handle\fP *h)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const unsigned char * \fBbogon\fP = NULL"
.br
.ti -1c
.RI "const \fBccnr_accession\fP \fBr_store_mark_repoFile1\fP = ((\fBccnr_accession\fP)1) << 48"
.br
.in -1c
.SH "Detailed Description"
.PP 
Part of ccnr - CCNx Repository Daemon. 


.PP
Definition in file \fBccnr_store.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define CCN_BT_CLEAN_BATCH   3"
.PP
Number of btree index writes to do in a batch. 
.PP
Definition at line 1523 of file ccnr_store.c.
.PP
Referenced by r_store_index_cleaner().
.SS "#define CCN_BT_CLEAN_TICK_MICROS   65536"
.PP
Approximate delay between batches of btree index writes. 
.PP
Definition at line 1525 of file ccnr_store.c.
.PP
Referenced by r_store_index_cleaner(), and r_store_index_needs_cleaning().
.SS "#define CHKPTR(p)   FAILIF((p) == NULL)"
.PP
Definition at line 94 of file ccnr_store.c.
.SS "#define CHKRES(res)   FAILIF((res) < 0)"
.PP
Definition at line 93 of file ccnr_store.c.
.SS "#define CHKSYS(res)   FAILIF((res) == -1)"
.PP
Definition at line 92 of file ccnr_store.c.
.SS "#define FAILIF(cond)   do {} while ((cond) && r_store_fatal(h, __func__, __LINE__))"
.PP
Definition at line 91 of file ccnr_store.c.
.SH "Function Documentation"
.PP 
.SS "static int ccn_append_interest_bounds (const unsigned char * interest_msg, const struct \fBccn_parsed_interest\fP * pi, struct \fBccn_charbuf\fP * lower, struct \fBccn_charbuf\fP * upper)\fC [static]\fP"
.PP
Extract the flatname representations of the bounds for the next component after the name prefix of the interest. These are exclusive bounds. The results are appended to lower and upper (when not NULL). If there is no lower bound, lower will be unchanged. If there is no upper bound, a sentinel value is appended to upper.
.PP
\fBReturns:\fP
.RS 4
on success the number of Components in Exclude. A negative value indicates an error. 
.RE
.PP

.PP
Definition at line 866 of file ccnr_store.c.
.PP
Referenced by r_store_find_first_match_candidate(), and r_store_lookup_backwards().
.SS "PUBLIC void ccnr_debug_content (struct \fBccnr_handle\fP * h, int lineno, const char * msg, struct \fBfdholder\fP * fdholder, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 1501 of file ccnr_store.c.
.PP
Referenced by cleanup_content_entry(), process_incoming_content(), r_proto_continue_enumeration(), r_store_content_from_accession(), r_store_forget_content(), r_store_lookup(), r_store_mark_stale(), r_store_next_child_at_level(), r_store_send_content(), r_store_set_content_timer(), r_sync_enumerate_action(), r_sync_local_store(), r_sync_notify_content(), and r_sync_upcall_store().
.SS "static unsigned choose_limit (unsigned l, unsigned m)\fC [static]\fP"
.PP
Select power of 2 between l and m + 1 (if possible). 
.PP
Definition at line 445 of file ccnr_store.c.
.PP
Referenced by r_store_init().
.SS "static void cleanup_content_entry (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)\fC [static]\fP"
.PP
Definition at line 457 of file ccnr_store.c.
.PP
Referenced by finalize_accession(), and r_store_forget_content().
.SS "static int expire_content (struct ccn_schedule * sched, void * clienth, struct \fBccn_scheduled_event\fP * ev, int flags)\fC [static]\fP"
.PP
Scheduled event that makes content stale when its FreshnessSeconds has expired. 
.PP
Definition at line 1233 of file ccnr_store.c.
.PP
Referenced by r_store_set_content_timer().
.SS "static void finalize_accession (struct \fBhashtb_enumerator\fP * e)\fC [static]\fP"
.PP
Definition at line 478 of file ccnr_store.c.
.PP
Referenced by r_store_init().
.SS "PUBLIC struct \fBcontent_entry\fP* process_incoming_content (struct \fBccnr_handle\fP * h, struct \fBfdholder\fP * fdholder, unsigned char * msg, size_t size, off_t * offsetp)\fC [read]\fP"
.PP
Definition at line 1337 of file ccnr_store.c.
.SS "PUBLIC int r_store_commit_content (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 1483 of file ccnr_store.c.
.PP
Referenced by load_policy(), process_input_message(), r_init_map_and_process_file(), r_proto_expect_content(), r_sync_local_store(), and r_sync_upcall_store().
.SS "PUBLIC \fBccnr_accession\fP r_store_content_accession (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 109 of file ccnr_store.c.
.PP
Referenced by r_sync_enumerate_action(), and r_sync_notify_content().
.SS "PUBLIC const unsigned char* r_store_content_base (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Get the base address of the content object. This may involve reading the object in. Caller should not assume that the address will stay valid after it relinquishes control, either by returning or by calling routines that might invalidate objects. 
.PP
Definition at line 264 of file ccnr_store.c.
.PP
Referenced by load_policy(), r_lookup(), r_match_consume_matching_interests(), r_proto_policy_update(), r_store_content_btree_insert(), r_store_content_field_access(), r_store_content_from_accession(), r_store_send_content(), r_store_set_content_timer(), and r_store_set_flatname().
.SS "static int r_store_content_btree_insert (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, struct \fBccn_parsed_ContentObject\fP * pco, \fBccnr_accession\fP * accp)\fC [static]\fP"\fBReturns:\fP
.RS 4
2 if content was added to index, 1 if it was there but had no accession, 0 if it was already there, -1 for error 
.RE
.PP

.PP
Definition at line 706 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), and r_store_content_from_accession().
.SS "PUBLIC int r_store_content_change_flags (struct \fBcontent_entry\fP * content, int set, int clear)"
.PP
Definition at line 318 of file ccnr_store.c.
.PP
Referenced by r_store_commit_content().
.SS "PUBLIC \fBccnr_cookie\fP r_store_content_cookie (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 115 of file ccnr_store.c.
.PP
Referenced by r_proto_expect_content(), r_sendq_face_send_queue_insert(), r_sync_enumerate_action(), and r_sync_upcall_store().
.SS "PUBLIC int r_store_content_field_access (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, enum \fBccn_dtag\fP dtag, const unsigned char ** bufp, size_t * sizep)"
.PP
Definition at line 1388 of file ccnr_store.c.
.SS "PUBLIC int r_store_content_flags (struct \fBcontent_entry\fP * content)"
.PP
Definition at line 312 of file ccnr_store.c.
.PP
Referenced by r_sendq_face_send_queue_insert(), r_store_commit_content(), r_sync_local_store(), and r_sync_upcall_store().
.SS "PUBLIC struct \fBccn_charbuf\fP* r_store_content_flatname (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)\fC [read]\fP"
.PP
Get the flatname associated with content. \fBReturns:\fP
.RS 4
flatname in a charbuf, which should be treated as read-only. 
.RE
.PP

.PP
Definition at line 1331 of file ccnr_store.c.
.PP
Referenced by r_sync_enumerate_action().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_content_from_accession (struct \fBccnr_handle\fP * h, \fBccnr_accession\fP accession)\fC [read]\fP"
.PP
Definition at line 617 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), r_store_lookup(), and r_sync_enumerate_action().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_content_from_cookie (struct \fBccnr_handle\fP * h, \fBccnr_cookie\fP cookie)\fC [read]\fP"
.PP
Definition at line 660 of file ccnr_store.c.
.PP
Referenced by content_sender(), expire_content(), r_store_lookup(), and r_sync_enumerate_action().
.SS "static const unsigned char* r_store_content_mapped (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)\fC [static]\fP"
.PP
Definition at line 141 of file ccnr_store.c.
.PP
Referenced by r_store_content_base().
.SS "PUBLIC int r_store_content_matches_interest_prefix (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, const unsigned char * interest_msg, size_t interest_size)"
.PP
Definition at line 1026 of file ccnr_store.c.
.PP
Referenced by r_proto_begin_enumeration(), r_proto_continue_enumeration(), r_store_lookup(), and r_sync_enumerate_action().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_content_next (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)\fC [read]\fP"
.PP
Definition at line 1043 of file ccnr_store.c.
.PP
Referenced by r_store_lookup(), and r_sync_enumerate_action().
.SS "static const unsigned char* r_store_content_read (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)\fC [static]\fP"
.PP
Definition at line 147 of file ccnr_store.c.
.PP
Referenced by r_store_content_base().
.SS "PUBLIC size_t r_store_content_size (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 121 of file ccnr_store.c.
.PP
Referenced by load_policy(), r_lookup(), r_match_consume_matching_interests(), and r_proto_policy_update().
.SS "PUBLIC int r_store_content_trim (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
If the content appears to be safely stored in the repository, removes any buffered copy. \fBReturns:\fP
.RS 4
0 if buffer was removed, -1 if not. 
.RE
.PP

.PP
Definition at line 215 of file ccnr_store.c.
.PP
Referenced by r_store_trim().
.SS "PUBLIC \fBccnr_cookie\fP r_store_enroll_content (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
This makes a cookie for content, and, if it has an accession number already, enters it into the content_by_accession_tab. Does not index by name. 
.PP
Definition at line 675 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), r_store_content_from_accession(), and r_store_look().
.SS "static int r_store_fatal (struct \fBccnr_handle\fP * h, const char * fn, int lineno)\fC [static]\fP"
.PP
Definition at line 97 of file ccnr_store.c.
.SS "PUBLIC int r_store_final (struct \fBccnr_handle\fP * h, int stable)"
.PP
Definition at line 605 of file ccnr_store.c.
.PP
Referenced by r_init_destroy().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_find_first_match_candidate (struct \fBccnr_handle\fP * h, const unsigned char * interest_msg, const struct \fBccn_parsed_interest\fP * pi)\fC [read]\fP"
.PP
Definition at line 1010 of file ccnr_store.c.
.PP
Referenced by r_proto_begin_enumeration(), and r_store_lookup().
.SS "PUBLIC void r_store_forget_content (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP ** pentry)"
.PP
Remove internal representation of a content object. 
.PP
Definition at line 769 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), r_store_content_from_accession(), and r_store_enroll_content().
.SS "static int r_store_index_cleaner (struct ccn_schedule * sched, void * clienth, struct \fBccn_scheduled_event\fP * ev, int flags)\fC [static]\fP"
.PP
Definition at line 1527 of file ccnr_store.c.
.PP
Referenced by r_store_index_needs_cleaning().
.SS "PUBLIC void r_store_index_needs_cleaning (struct \fBccnr_handle\fP * h)"
.PP
Definition at line 1622 of file ccnr_store.c.
.PP
Referenced by r_store_content_btree_insert(), r_store_init(), and r_store_trim().
.SS "PUBLIC void r_store_init (struct \fBccnr_handle\fP * h)"
.PP
Definition at line 487 of file ccnr_store.c.
.PP
Referenced by r_init_create().
.SS "static struct \fBcontent_entry\fP* r_store_look (struct \fBccnr_handle\fP * h, const unsigned char * key, size_t size)\fC [static, read]\fP"
.PP
Get a handle on the content object that matches key, or if there is no match, the one that would come just after it. The key is in flatname format. 
.PP
Definition at line 810 of file ccnr_store.c.
.PP
Referenced by r_store_content_next(), r_store_find_first_match_candidate(), r_store_lookup_backwards(), r_store_lookup_ccnb(), and r_store_next_child_at_level().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_lookup (struct \fBccnr_handle\fP * h, const unsigned char * msg, const struct \fBccn_parsed_interest\fP * pi, struct \fBccn_indexbuf\fP * comps)\fC [read]\fP"
.PP
Definition at line 1095 of file ccnr_store.c.
.PP
Referenced by r_lookup(), r_proto_answer_req(), and r_proto_start_write_checked().
.SS "static struct \fBcontent_entry\fP* r_store_lookup_backwards (struct \fBccnr_handle\fP * h, const unsigned char * interest_msg, const struct \fBccn_parsed_interest\fP * pi, struct \fBccn_indexbuf\fP * comps)\fC [static, read]\fP"
.PP
Definition at line 928 of file ccnr_store.c.
.PP
Referenced by r_store_lookup().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_lookup_ccnb (struct \fBccnr_handle\fP * h, const unsigned char * namish, size_t size)\fC [read]\fP"
.PP
Find the first content handle that matches the prefix given by the namish, which may be a Name, Interest, ContentObject, . ..
.PP
Does not check the other parts of namish, in particular, does not generate the digest component of a ContentObject. 
.PP
Definition at line 1182 of file ccnr_store.c.
.PP
Referenced by load_policy(), and r_proto_policy_update().
.SS "PUBLIC void r_store_mark_stale (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content)"
.PP
Mark content as stale. 
.PP
Definition at line 1213 of file ccnr_store.c.
.PP
Referenced by expire_content().
.SS "PUBLIC int r_store_name_append_components (struct \fBccn_charbuf\fP * dst, struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, int skip, int count)"
.PP
Definition at line 297 of file ccnr_store.c.
.PP
Referenced by r_match_match_interests(), r_proto_continue_enumeration(), and r_sync_notify_content().
.SS "PUBLIC struct \fBcontent_entry\fP* r_store_next_child_at_level (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, int level)\fC [read]\fP"
.PP
Definition at line 1054 of file ccnr_store.c.
.PP
Referenced by r_proto_continue_enumeration(), and r_store_lookup().
.SS "static off_t r_store_offset_from_accession (struct \fBccnr_handle\fP * h, \fBccnr_accession\fP a)\fC [static]\fP"
.PP
Definition at line 127 of file ccnr_store.c.
.PP
Referenced by r_store_content_read().
.SS "static void r_store_read_stable_point (struct \fBccnr_handle\fP * h)\fC [static]\fP"
.PP
Read the former size of repoFile1 from index/stable, and remove the latter. 
.PP
Definition at line 375 of file ccnr_store.c.
.PP
Referenced by r_store_init().
.SS "static int r_store_reindexing (struct ccn_schedule * sched, void * clienth, struct \fBccn_scheduled_event\fP * ev, int flags)\fC [static]\fP"
.PP
Log a bit if we are taking a while to re-index. 
.PP
Definition at line 420 of file ccnr_store.c.
.PP
Referenced by r_store_init().
.SS "static unsigned r_store_repofile_from_accession (struct \fBccnr_handle\fP * h, \fBccnr_accession\fP a)\fC [static]\fP"
.PP
Definition at line 133 of file ccnr_store.c.
.PP
Referenced by r_store_content_read().
.SS "PUBLIC void r_store_send_content (struct \fBccnr_handle\fP * h, struct \fBfdholder\fP * fdholder, struct \fBcontent_entry\fP * content)"
.PP
Definition at line 1458 of file ccnr_store.c.
.PP
Referenced by r_link_send_content(), and r_store_commit_content().
.SS "PUBLIC int r_store_set_accession_from_offset (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, struct \fBfdholder\fP * fdholder, off_t offset)"
.PP
Definition at line 1413 of file ccnr_store.c.
.PP
Referenced by r_store_send_content().
.SS "PUBLIC void r_store_set_content_timer (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, struct \fBccn_parsed_ContentObject\fP * pco)"
.PP
Schedules content expiration based on its FreshnessSeconds. 
.PP
Definition at line 1254 of file ccnr_store.c.
.PP
Referenced by process_incoming_content().
.SS "static int r_store_set_flatname (struct \fBccnr_handle\fP * h, struct \fBcontent_entry\fP * content, struct \fBccn_parsed_ContentObject\fP * pco)\fC [static]\fP"
.PP
Parses content object and sets content->flatname. 
.PP
Definition at line 1290 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), and r_store_content_from_accession().
.SS "PUBLIC void r_store_trim (struct \fBccnr_handle\fP * h, unsigned long limit)"
.PP
Evict recoverable content from in-memory buffers. 
.PP
Definition at line 229 of file ccnr_store.c.
.PP
Referenced by r_dispatch_run(), and r_init_create().
.SS "static int r_store_write_stable_point (struct \fBccnr_handle\fP * h)\fC [static]\fP"
.PP
Write a file named index/stable that contains the size of repoFile1 when the repository is shut down. 
.PP
Definition at line 331 of file ccnr_store.c.
.PP
Referenced by r_store_final().
.SH "Variable Documentation"
.PP 
.SS "const unsigned char* \fBbogon\fP = NULL\fC [static]\fP"
.PP
Definition at line 79 of file ccnr_store.c.
.PP
Referenced by r_store_content_base().
.SS "const \fBccnr_accession\fP \fBr_store_mark_repoFile1\fP = ((\fBccnr_accession\fP)1) << 48"
.PP
Definition at line 80 of file ccnr_store.c.
.PP
Referenced by process_incoming_content(), and r_store_set_accession_from_offset().
.SH "Author"
.PP 
Generated automatically by Doxygen for Content-Centric Networking in C from the source code.
