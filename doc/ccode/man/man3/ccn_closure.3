.TH "ccn_closure" 3 "4 Feb 2013" "Version 0.7.1" "Content-Centric Networking in C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ccn_closure \- 
.PP
Handle for upcalls that allow clients receive notifications of incoming interests and content.  

.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBccn_handler\fP \fBp\fP"
.br
.RI "\fIclient-supplied handler \fP"
.ti -1c
.RI "void * \fBdata\fP"
.br
.RI "\fIfor client use \fP"
.ti -1c
.RI "intptr_t \fBintdata\fP"
.br
.RI "\fIfor client use \fP"
.ti -1c
.RI "int \fBrefcount\fP"
.br
.RI "\fIclient should not update this directly \fP"
.in -1c
.SH "Detailed Description"
.PP 
Handle for upcalls that allow clients receive notifications of incoming interests and content. 

The client is responsible for managing this piece of memory and the data therein. The refcount should be initially zero, and is used by the library to keep to track of multiple registrations of the same closure. When the count drops back to 0, the closure will be called with kind = CCN_UPCALL_FINAL so that it has an opportunity to clean up. 
.PP
Definition at line 117 of file ccn.h.
.SH "Field Documentation"
.PP 
.SS "void* \fBccn_closure::data\fP"
.PP
for client use 
.PP
Definition at line 119 of file ccn.h.
.PP
Referenced by advise_interest_arrived(), CallMe(), ccn_dump_names(), ccnd_adjacency_offer_or_commit_req(), ccnd_answer_req(), ccnd_req_guest(), ccnd_uri_listen(), ccnr_answer_req(), ccnr_uri_listen(), ccns_close(), ccns_open(), chat_main(), free_fetch_data(), freeFetchData(), get_my_data(), handle_multifilt(), handle_prefix_reg_reply(), handle_simple_incoming_content(), imcoming_bulkdata(), incoming_adjacency(), incoming_content(), incoming_interest(), interest_handler(), main(), my_get(), my_response(), NeedSegment(), outgoing_content(), putFile(), r_proto_answer_req(), r_proto_begin_enumeration(), r_proto_bulk_import(), r_proto_continue_enumeration(), r_proto_expect_content(), r_proto_initiate_key_fetch(), r_proto_policy_complete(), r_proto_start_write(), r_proto_start_write_checked(), r_proto_uri_listen(), send_adjacency_solicit(), seqw_incoming_interest(), solicit_response(), split_my_excludes(), start_interest(), storeHandler(), SyncInterestArrived(), SyncRegisterInterest(), SyncRemoteFetchResponse(), SyncRootAdviseResponse(), SyncSendRootAdviseInterest(), SyncStartContentFetch(), SyncStartNodeFetch(), write_interest_handler(), and write_slice().
.SS "intptr_t \fBccn_closure::intdata\fP"
.PP
for client use 
.PP
Definition at line 120 of file ccn.h.
.PP
Referenced by ask_more(), ccn_initiate_key_fetch(), ccnd_adjacency_offer_or_commit_req(), ccnd_answer_req(), ccnd_uri_listen(), ccnr_answer_req(), ccnr_uri_listen(), handle_key(), handle_simple_incoming_content(), incoming_adjacency(), incoming_content(), incoming_interest(), main(), my_response(), r_proto_expect_content(), r_proto_uri_listen(), send_adjacency_solicit(), solicit_response(), start_interest(), write_interest_handler(), and write_slice().
.SS "\fBccn_handler\fP \fBccn_closure::p\fP"
.PP
client-supplied handler 
.PP
Definition at line 118 of file ccn.h.
.PP
Referenced by ccn_dump_names(), ccn_initiate_ccndid_fetch(), ccn_initiate_key_fetch(), ccn_replace_handler(), ccnd_adjacency_offer_or_commit_req(), ccnd_uri_listen(), ccndc_daemonize(), ccnr_uri_listen(), ccns_open(), chat_main(), check_offer_matches_my_solicit(), deliver_content(), fill_holes(), incoming_content(), main(), my_get(), NeedSegment(), putFile(), r_proto_initiate_key_fetch(), r_proto_start_write(), r_proto_uri_listen(), send_adjacency_solicit(), split_my_excludes(), start_interest(), SyncRegisterInterest(), SyncSendRootAdviseInterest(), SyncStartContentFetch(), SyncStartNodeFetch(), update_multifilt(), and write_slice().
.SS "int \fBccn_closure::refcount\fP"
.PP
client should not update this directly 
.PP
Definition at line 121 of file ccn.h.
.PP
Referenced by ccn_replace_handler(), deliver_content(), imcoming_bulkdata(), incoming_content(), and update_multifilt().

.SH "Author"
.PP 
Generated automatically by Doxygen for Content-Centric Networking in C from the source code.
