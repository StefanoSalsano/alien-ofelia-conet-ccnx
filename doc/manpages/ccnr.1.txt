CCNR(1)
=======

NAME
----
ccnr - CCNx Repository

SYNOPSIS
--------
*ccnr* [-h]

DESCRIPTION
-----------
A Repository supports the network by preserving content and responding to Interests requesting content that it holds. These services are available to CCN components, including CCN-enabled customer applications. A Repository can exist in any node, and is recommended if applications in that node need to preserve data. See link:../technical/RepoProtocol.html[CCNx Repository Protocols] for more information about the Repository.

The *ccnr* command starts the Repository using the directory specified by the +CCNR_DIRECTORY+ environment variable. At startup, the Repository retrieves and applies the configuration options described below.

The directory named by CCNR_DIRECTORY must exist already. To start ccnr as a daemon, redirect stderr to a file and execute

  bin/ccnr &

ccnr shuts down gracefully if it receives SIGINT or SIGTERM, or if the ccnd to which it is connected is shut down.

Do not run two Repositories on the same backing store directory at the same time.

The Repository uses +$CCNR_DIRECTORY/repoFile1+ for persistent storage of CCN Content Objects. A disk-resident index facilitates rapid start-up and limits the memory footprint. If an index does not exist, it is built during startup.

A policy file specifies the namespaces for which the Repository accepts and holds content. The name of the policy file is the concatenation of the global prefix and "data/policy.xml". Unless an alternative policy has been explicitly written/published under the policy information name, the the policy defaults to /, which means that writes will be accepted for any name and reads serviced for any name for which there is content.

The Repository is configured from information in the text file, +$CCNR_DIRECTORY/config+. The file is only read at startup time.

Any or all variables in the file may also be expressed as environment variables that are examined at startup time. If the same variable is defined in both the configuration file and an environment variable, the value in the configuration file takes precedence.

*CCNR_BTREE_MAX_FANOUT=_<Max fanout>_*::
     where _<Max fanout>_ is the maximum number of entries in index B-tree interior nodes. The maximum value for _<Max fanout>_  is 1999.

*CCNR_BTREE_MAX_LEAF_ENTRIES=_<Max leaf entries>_*::
     where _<Max leaf entries>_ is the maximum number of entries in index B-tree leaf nodes. The maximum value for _<Max leaf entries>_  is 1999.

*CCNR_BTREE_MAX_NODE_BYTES=_<Max index size>_*::
     where _<Max index size>_ is the maximum size of index B-tree nodes, in bytes. The maximum value for _<Max index size>_  is 2097152.

*CCNR_BTREE_NODE_POOL=_<Max index nodes cached>_*::
     where _<Max index nodes cached>_ is the maximum number of index B-tree nodes cached in memory. The maximum value for _<Max index nodes cached>_  is 512.

*CCNR_CONTENT_CACHE=_< Max objects cached>_*::
     where _< Max objects cached>_ is the maximum number of Content Objects cached in memory. The maximum value for _< Max objects cached>_  is 4201.

*CCNR_DEBUG=_<debug logging level>_*::
     where _<debug logging level>_ is one of the following.  If the option is not specified, the default is +WARNING+.

* +NONE+ - no messages

* +SEVERE+ - severe, probably fatal, errors

* +ERROR+ - errors

* +WARNING+ - warnings

* +INFO+ - informational messages

* +FINE+, +FINER+, +FINEST+ - debugging/tracing

*CCNR_DIRECTORY*=_<directory>_::
     where _<directory>_ is the directory where the Repository storage is located, which defaults to the current directory. +CCNR_DIRECTORY+ is ignored in the configuration file.

*CCNR_GLOBAL_PREFIX=_<URI>_*::
     where _<URI>_ is the CCNx URI representing the prefix where +data/policy.xml+ is stored, and is meaningful only if no policy file exists at startup. _<URI>_ is expected by convention to be globally unique and meaningful, rather than only locally unique and contextually meaningful. If not specified, the URI defaults to +ccnx:/parc.com/csl/ccn/Repos+.

*CCNR_LISTEN_ON=_<IP address list>_*::
     where _<IP address list>_ is a list of IP addresses to listen on for status, in the case that +CCNR_STATUS_PORT+ is given. IP addresses may be in either IPv4 format (e.g., 127.0.0.1) or IPv6 format (e.g., fe80::226:bbff:fe1c:5530). Addresses may be separated by spaces, commas, or semi-colons.  If not specified, the default is effectively localhost.

*CCNR_MIN_SEND_BUFSIZE=_<Min buffer size>_*::
     where _<Min buffer size>_ is the minimum size in bytes of the output socket buffer (SO_SNDBUF) for the socket used to communicate with ccnd. The maximum value for _<Min buffer size>_ is 16384. If the system provides more than this by default, the system's value is used.

*CCNR_PROTO=_<type>_*::
     where _<type>_ is the type of connection, which must be tcp or unix. If _<type>_ is tcp, Repo will connect to ccnd via TCP; if _<type>_ is unix, Repo will connect via Unix IPC. If not specified, the default is unix.

*CCNR_STATUS_PORT=_<port>_*::
     where _<port>_ is the tcp port to use for a status server. If this option is not specified, no status is served. As an expedient, this port may also be used to insert Content Objects into the Repository.

*CCNR_START_WRITE_SCOPE_LIMIT=_<Scope limit>_*::
     where _<Scope limit>_ is in the range 0..3 (default 3). Process start-write(-checked) interests with a scope
     not exceeding the given value.  0 is effectively read-only. 3 indicates unlimited.

*CCNS_DEBUG=_<Sync debug logging level>_*::
     where _<Sync debug logging level>_ has the same values as for +CCNR_DEBUG+ above. If not specified, the default is +WARNING+.

*CCNS_ENABLE=_<do sync>_*::
     where _<do sync>_ specifies whether to disable (0) or enable (1) Sync processing. If not specified, the default is enabled.

*CCNS_FAUX_ERROR=_<simulate random loss>_*::
     where _<simulate random loss>_ specifies whether and how much random packet loss to simulate. If _<simulate random loss>_ is 0, no loss is simulated; if in the range 1-99, the number is the percentage of packets to drop at random. If not specified, the default is 0 (no loss).

*CCNS_HEARTBEAT_MICROS=_<heartbeat>_*::
     where _<heartbeat>_ is the number of microseconds between Sync heartbeats, and must be an integer in the range 100000-10000000. If not specified, the default is 200000.

*CCNS_MAX_COMPARES_BUSY=_<max compares>_*::
     where  _<max compares>_ is the maximum number of Sync roots that can be in compare state simultaneously, and must be an integer in the range 1-100. If not specified, the default is 4.

*CCNS_MAX_FETCH_BUSY=_<max fetches>_*::
     where _<max fetches>_ is the maximum number of simultaneous node or content fetches per Sync root, and must be an integer in the range 1-100. If not specified, the default is 6.

*CCNS_NODE_FETCH_LIFETIME=_<nf lifetime>_*::
     where _<nf lifetime>_ is the maximum amount of time in seconds to wait for a response to a NodeFetch request, and must be an integer in the range 1-30. If not specified, the default is 4.

*CCNS_NOTE_ERR=_<exceptional errors flag>_*::
     where _<exceptional errors flag>_ specifies whether exceptional Sync error reporting is disabled (0) or enabled (1). If not specified, the default is 0 (disabled).

*CCNS_REPO_STORE=_<store state flag>_*::
     where _<store state flag>_ specifies whether storing of Sync state to the Repository is disabled (0) or enabled. If not specified, the default is 1 (enabled).

*CCNS_ROOT_ADVISE_FRESH=_<freshness>_*::
     where _<freshness>_ is the amount of time a response to a Sync RootAdvise will stay "fresh" (valid) in a ccnd cache in seconds, and must be an integer in the range 1-30. If not specified, the default is 4.

*CCNS_ROOT_ADVISE_LIFETIME=_<ra lifetime>_*::
     where _<ra lifetime>_ is the maximum amount of time in seconds to wait for a response to a RootAdvise request, and must be an integer in the range 1-30. If not specified, the default is 20.

*CCNS_STABLE_ENABLED=_<store stable flag>_*::
     where _<store stable flag>_ specifies whether storing of Sync stable points to the Repository is disabled (0) or enabled (1). If not specified, the default is 1 (enabled).

*CCNS_SYNC_SCOPE=_<sync scope>_*::
     where _<sync scope>_ is the scope applied to sync generated interests (RootAdvise and remote fetch).  The value must be 0 (unscoped), 1 (local host), or 2 (next host).  If not specified the default is 2.

OPTIONS
-------
*-h*::
	Print a usage message.

EXIT STATUS
-----------
*0*::
     Success

*1*::
     Failure (syntax or usage error; startup error; failed to connect to ccnd)

AUTHOR
------
Michael Plass, Nick Briggs
